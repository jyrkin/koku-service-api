<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://services.koku.fi/utility/kks/v1"
  xmlns="http://services.koku.fi/utility/kks/v1"
  elementFormDefault="qualified"
  version="0.2"
  >
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      KoKu KKS service message type definitions.
      Ixonos / tuomape
      Ixonos / aspluma
      
      TODO
      - use container element for lists of elements (e.g. classifications, values etc.)
      - how is an initial collection created? opAddCollectionVersion requires collection id.
      - collection versioning logic?
      - missing concepts? kksEntryType? 
      - naming conventions
        * entryTypeGroups / KksGroup
        * custom complex types should have "Type" suffix
      - purpose of creatable?
        don't we just need a list of all available collection types?
        why is this parameterized with customer PIC?
        is this used actually for listing customer's collection instances?
      - reuse data types

    </xsd:documentation>
  </xsd:annotation>
  
  <!-- element for collection type (collection metadata) -->
  <xsd:element name="kksCollectionType" type="KksCollectionType"/>
  
  <!-- element for entry type (entry metadata) -->
  <xsd:element name="kksEntryType" type="KksEntryType"/>
  
  <!-- element for collection -->
  <xsd:element name="kksCollection" type="KksCollection"/>
  
  <!-- element for single entry -->
  <xsd:element name="kksEntry" type="KksEntry"/>
  
  <!-- element for classification -->
  <xsd:element name="kksClassification" type="KksClassification"/>
  
  <!-- element for entry groups -->
  <xsd:element name="kksGroup" type="KksGroup"/>
  
  <!-- element for search criteria -->
  <xsd:element name="kksQueryCriteria" type="KksQueryCriteria"/>  
  
  <!-- element for search results -->
  <xsd:element name="kksSearchResult" type="KksSearchResult"/>
  
  <!-- element for persons kks collection -->
  <xsd:element name="kks" type="KKS"/> 
  
  <!-- element for collection types that can be created  -->
  <xsd:element name="creatableCollections" type="KksCreatableCollections"/>  
  
  <!-- element for object that can be created  -->
  <xsd:element name="creatable" type="KksCreatable"/>  
  
  <!-- element for customer's pic -->
  <xsd:element name="customerPic" type="xsd:string"/>
  
  <!-- element for collection id -->
  <xsd:element name="kksCollectionId" type="xsd:string"/>
  
    <!-- element for general operation succeed (TEMP solution) -->
  <xsd:element name="kksOperationSuccess" type="xsd:boolean"/>
  

  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      collections: persons collections
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KKS">
    <xsd:sequence>
      <xsd:element name="collections" type="KksCollection" minOccurs="0" maxOccurs="unbounded" /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      pic: search target person pic
      classifications: search classifications
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksQueryCriteria">
    <xsd:sequence>
      <xsd:element name="pic" type="xsd:string"/>
      <xsd:element name="classifications" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>

  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      collections: persons collections
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksCreatableCollections">
    <xsd:sequence>
      <xsd:element name="creatables" type="KksCreatable" minOccurs="0" maxOccurs="unbounded" /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  
   <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: Creatable identifier
      name: Creatable name
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksCreatable">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="name" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: Collection identifier
      name: Collection type name
      description: Collection type description
      entryTypeGroups: Collections entry type groups
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksCollectionType">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
      <xsd:element name="entryTypeGroups" type="KksGroup" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  

  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: Group identifier
      order: Group order
      name: Group name
      description: Group description
      register: Register where group entry types are managed
      entryTypes: Group entry types
      customerGroups: Group customer groups
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksGroup">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="order" type="xsd:integer"/>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
      <xsd:element name="register" type="xsd:string"/>
      <!-- does group have to know about entry types? one-way association from entry type to group? -->
      <xsd:element name="entryTypes" type="KksEntryType" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
      <xsd:element name="customerGroups" type="KksGroup" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: Entry type identifier
      sortOrder: entry type sort order
      name: Entry type name
      description: Entry type description
      multiValue: Is entry type multivalue field or not
      dataType: Entry type data type (text, free_text, select, multi_select)
      values: What kind of selection choices entry type can have (example checkbox choices etc)
      group: entry type group
      customerGroup: entry type customer group      
      register: Register where entry type is managed
      responsible: the entity that is responsible for entry (e.g. guardian, day care, ...)
      classifications: entry types classifications
      developmentTypes: entry types developmentTypes
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksEntryType">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="sortOrder" type="xsd:integer"/>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
      <xsd:element name="multiValue" type="xsd:boolean"/>
      <xsd:element name="dataType" type="xsd:string"/>
      <!-- is this "arvojoukko"? rename as "valueSpace" or similar -->
      <xsd:element name="values" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/> <!-- wrap in container -->
      <xsd:element name="group" type="xsd:string"/>
      <xsd:element name="customerGroup" type="xsd:string"/> <!-- group vs. customerGroup? -->
      <xsd:element name="register" type="xsd:string"/>
      <xsd:element name="responsible" type="xsd:string"/>     <!-- should be in entry group ? -->
      <!-- combine classifications and developmentTypes? -->
      <!-- make a reference to the type. type ID or similar -->
      <xsd:element name="classifications" type="KksClassification" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
      <xsd:element name="developmentTypes" type="KksClassification" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: classification identifier
      name: classification name
      description: classification description
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksClassification">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
   
  
   <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: Entry identifier
      modified: when entry was last modified
      creator: who made the entry
      version: entry version
      entryType: entry type
      classifications: entry specific classifications
      values: Entry value(s)
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksEntry">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="modified" type="xsd:dateTime"/>
      <xsd:element name="creator" type="xsd:string"/>
      <xsd:element name="version" type="xsd:integer"/>
      <xsd:element name="entryType" type="KksEntryType"/> <!-- make a reference to the type. type ID or similar -->
      <xsd:element name="classifications" type="KksClassification" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
      <xsd:element name="values" type="xsd:string" minOccurs="0" maxOccurs="unbounded"  /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
  
  
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      id: collection identifier
      name: collection name
      description: collection description
      status: collection status (active, locked)
      created: when the collection was created
      version: collection version
      type: collection type
      entries: collection entries
      nextVersion: link to next collection version (if exist)
      prevVersion: link to previous collection (if exist)
      versioned: is collection versioned
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksCollection">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element name="description" type="xsd:string"/>
      <xsd:element name="status" type="xsd:string"/>
      <xsd:element name="created" type="xsd:dateTime"/>
      <xsd:element name="version" type="xsd:integer"/>
      <xsd:element name="type" type="KksCollectionType"/> <!-- make a reference to the type. type ID or similar -->
      <xsd:element name="entries" type="KksEntry" minOccurs="0" maxOccurs="unbounded"/> <!-- wrap in container -->
      <xsd:element name="nextVersion" type="xsd:string"/>
      <xsd:element name="prevVersion" type="xsd:string"/>
      <xsd:element name="versioned" type="xsd:boolean"/>
    </xsd:sequence>
  </xsd:complexType>


   <xsd:annotation>
    <xsd:documentation xml:lang="en">
      collectionId: id of the collection where entries are found
      collectionStatus:  status of the collection where entries are found
      collectionName:  name of the collection where entries are found
      entries: searcj result entries
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="KksSearchResult">
    <xsd:sequence> <!-- TODO: miksei KkksCollection? -->
      <xsd:element name="collectionId" type="xsd:string"/>
      <xsd:element name="collectionStatus" type="xsd:string"/>
      <xsd:element name="collectionName" type="xsd:string"/>
      <xsd:element name="entries" type="KksEntry" minOccurs="1" maxOccurs="unbounded" /> <!-- wrap in container -->
    </xsd:sequence>
  </xsd:complexType>
 
  
  <!-- common type and element definitions -->

  <xsd:element name="auditInfo" type="auditInfoType"/>

  <xsd:complexType name="auditInfoType">
    <xsd:sequence>
      <xsd:element name="component" type="xsd:string"/>
      <xsd:element name="userId" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="numericId">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="\d+" />
      <xsd:maxLength value="19"/>
    </xsd:restriction>
  </xsd:simpleType>

</xsd:schema>
